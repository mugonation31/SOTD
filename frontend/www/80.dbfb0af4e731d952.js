"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[80],{9699:(U,h,u)=>{u.d(h,{B:()=>v});var G=u(4412),S=u(7673),g=u(4438),b=u(8010);let v=(()=>{var l;class p{constructor(e){this.authService=e,this.STORAGE_KEY_PREFIX="sotd_groups",this.USER_GROUPS_KEY_PREFIX="sotd_user_groups",this.LEGACY_STORAGE_KEY="sotd_groups",this.GLOBAL_GROUPS_KEY="sotd_all_groups",this.groupsSubject=new G.t([]),this.groups$=this.groupsSubject.asObservable(),console.log("\u{1f3d7}\ufe0f GroupService: Initializing service"),this.initializeGlobalStorage(),this.authService.currentUser.subscribe(o=>{console.log("\u{1f464} GroupService: User changed, reinitializing storage"),this.handleUserChange((null==o?void 0:o.user)||null)})}handleUserChange(e){console.log("\u{1f504} GroupService: Handling user change"),e?(console.log("\u{1f464} GroupService: User authenticated, loading groups"),this.loadGroups()):(console.log("\u{1f464} GroupService: User logged out, clearing groups"),this.groupsSubject.next([]))}reinitializeForCurrentUser(){console.log("\u{1f504} GroupService: Manually reinitializing for current user"),this.initializeGlobalStorage(),this.loadGroups()}initializeGlobalStorage(){const e=localStorage.getItem(this.GLOBAL_GROUPS_KEY),o=localStorage.getItem(this.LEGACY_STORAGE_KEY);if(console.log("\u{1f504} GroupService: Initializing global storage"),console.log(`\u{1f4c2} Global data exists: ${!!e}`),console.log(`\u{1f4c2} Legacy data exists: ${!!o}`),!e&&o){console.log("\u{1f4e6} GroupService: Migrating legacy group data to global storage");try{const r=JSON.parse(o);console.log(`\u{1f4ca} GroupService: Migrated ${r.length} groups to global storage`),localStorage.setItem(this.GLOBAL_GROUPS_KEY,JSON.stringify(r))}catch(r){console.error("\u274c GroupService: Error migrating legacy data:",r),localStorage.setItem(this.GLOBAL_GROUPS_KEY,JSON.stringify([]))}}else e||(console.log("\u{1f195} GroupService: Initializing empty global group storage"),localStorage.setItem(this.GLOBAL_GROUPS_KEY,JSON.stringify([])))}getUserSpecificStorageKey(){const e=this.authService.getCurrentUser();if(null==e||!e.id)return console.log("\u26a0\ufe0f GroupService: No authenticated user, using legacy storage key"),this.LEGACY_STORAGE_KEY;const o=`${this.STORAGE_KEY_PREFIX}_${e.id}`;return console.log(`\u{1f511} GroupService: Using user-specific storage key: ${o}`),o}clearUserGroupData(){const e=this.authService.getCurrentUser();null!=e&&e.id?(console.log("\u{1f5d1}\ufe0f GroupService: User logged out, clearing observable but keeping global groups"),this.groupsSubject.next([])):console.log("\u26a0\ufe0f GroupService: Cannot clear user data - no authenticated user")}loadGroups(){const e=this.getAllGroups();this.groupsSubject.next(e)}getAllGroups(){const e=localStorage.getItem(this.GLOBAL_GROUPS_KEY);if(!e)return console.log("\u{1f4c2} GroupService: No group data found in global storage"),[];try{const o=JSON.parse(e);return console.log(`\u{1f4c2} GroupService: Loaded ${o.length} groups from global storage`),o.map(r=>({...r,createdAt:new Date(r.createdAt),members:r.members.map(t=>({...t,joinedAt:new Date(t.joinedAt)}))}))}catch(o){return console.error("\u274c GroupService: Error parsing group data:",o),[]}}getUserGroups(){const e=this.authService.getCurrentUser();if(null==e||!e.email)return console.log("\u26a0\ufe0f GroupService: No authenticated user for getUserGroups"),[];const r=this.getAllGroups().filter(t=>t.members.some(s=>s.email===e.email));return console.log(`\u{1f464} GroupService: Found ${r.length} groups for user ${e.email}`),r}getAdminGroups(){const e=this.authService.getCurrentUser();if(null==e||!e.email)return console.log("\u26a0\ufe0f GroupService: No authenticated user for getAdminGroups"),[];const r=this.getAllGroups().filter(t=>t.members.some(s=>s.email===e.email&&"admin"===s.role));return console.log(`\u{1f451} GroupService: Found ${r.length} admin groups for user ${e.email}`),r}saveGroup(e){const o=this.authService.getCurrentUser();if(null==o||!o.id)throw console.error("\u274c GroupService: Cannot save group - no authenticated user"),new Error("User not authenticated");const r=this.getAllGroups(),t=r.findIndex(s=>s.id===e.id);t>=0?(console.log(`\u{1f504} GroupService: Updating existing group ${e.id}`),r[t]=e):(console.log(`\u2795 GroupService: Adding new group ${e.id}`),r.push(e)),localStorage.setItem(this.GLOBAL_GROUPS_KEY,JSON.stringify(r)),console.log(`\u{1f4be} GroupService: Saved ${r.length} groups to global storage`),this.loadGroups()}findGroupByCode(e){console.log("\u{1f50d} Looking for group with code:",e);const o=this.getAllGroups();console.log("\u{1f4c2} Available groups:",o.length),console.log("\u{1f4c2} Available codes:",o.map(t=>t.code));const r=o.find(t=>t.code===e);return console.log("\u{1f3af} Found group by code search:",r?"YES":"NO"),r||null}joinGroup(e,o){console.log("\u{1f680} Starting joinGroup process with code:",e);const r=this.authService.getCurrentUser();if(console.log("\u{1f464} Current user:",r),console.log("\u{1f464} Current user ID:",null==r?void 0:r.id),console.log("\u{1f464} Current user email:",null==r?void 0:r.email),!r)throw console.log("\u274c User not authenticated"),new Error("User not authenticated");const t=this.getAllGroups();console.log("\u{1f4c2} Total groups available:",t.length);const s=t.findIndex(a=>a.code===e);if(console.log("\u{1f50d} Group index found:",s),-1===s)return console.log("\u274c Group not found with code:",e),null;const n=t[s];console.log("\u{1f3af} Found group to join:",n),console.log("\u{1f451} Group admin member:",n.members.find(a=>"admin"===a.role)),console.log("\u{1f465} All group members:",n.members.map(a=>({id:a.id,email:a.email,role:a.role})));const i=n.members.find(a=>a.id===r.id),c=n.members.find(a=>a.email===r.email);console.log("\u{1f465} Existing member by ID:",i),console.log("\u{1f465} Existing member by email:",c);const d=i||c;if(d){if(console.log("\u26a0\ufe0f User already exists in group with role:",d.role),"admin"===d.role)throw new Error("You are the admin of this group and cannot join as a player");if("player"===d.role)throw new Error("You are already a member of this group")}const m=o||{id:r.id,name:r.firstName&&r.lastName?`${r.firstName} ${r.lastName}`:r.username,email:r.email||"",joinedAt:new Date,status:"active",role:"player"};return console.log("\u2795 Adding new member:",m),n.members.push(m),n.memberCount=n.members.length,console.log("\u{1f4ca} Updated group member count:",n.memberCount),n.leaderboard=[],t[s]=n,localStorage.setItem(this.GLOBAL_GROUPS_KEY,JSON.stringify(t)),this.loadGroups(),console.log("\u2705 Successfully joined group, returning updated group"),n}deleteGroup(e){const o=this.getAllGroups().filter(r=>r.id!==e);localStorage.setItem(this.GLOBAL_GROUPS_KEY,JSON.stringify(o)),this.loadGroups()}createGroup(e){const o=this.authService.getCurrentUser();if(!o)throw new Error("User not authenticated");const r={id:o.id,name:o.firstName&&o.lastName?`${o.firstName} ${o.lastName}`:o.username,email:o.email||"",joinedAt:new Date,status:"active",role:"admin"},t={id:crypto.randomUUID(),name:e.name,code:this.generateGroupCode(),memberCount:1,createdAt:new Date,members:[r],settings:{allowPlayerInvites:!0,autoApproveJoins:!1,showLeaderboard:!0,allowMemberChat:!0},type:e.entryFee>0?"prize":"casual",entryFee:e.entryFee,paidMembers:0,totalPrizePool:0,adminName:r.name,leaderboard:[]};console.log("\u2705 Creating group:",t),console.log("\u{1f4dd} Group code:",t.code),console.log("\u{1f464} Admin member:",r),this.saveGroup(t);const s=this.getAllGroups();return console.log("\u{1f4be} All groups after save:",s),console.log("\u{1f4be} Saved group codes:",s.map(n=>({name:n.name,code:n.code}))),(0,S.of)(t)}getGroupLeaderboard(e){const o=this.getAllGroups().find(r=>r.id===e);if(!o)return[];if(0===o.leaderboard.length){const r=this.generateMockLeaderboard(o);return o.leaderboard=r,this.saveGroup(o),r}return o.leaderboard}generateMockLeaderboard(e){const o=this.authService.getCurrentUser(),r=180+Math.floor(40*Math.random()),t=Math.floor(30*Math.random())+10;return e.members.map((s,n)=>{const i=Math.floor(Math.random()*t)-t/2,c=Math.max(0,r-15*n+i);return{position:n+1,memberId:s.id,memberName:s.id===(null==o?void 0:o.id)?"You":s.name,name:s.id===(null==o?void 0:o.id)?"You":s.name,played:Math.floor(8*Math.random())+12,points:c,totalPoints:c,jokerUsed:Math.floor(3*Math.random())+1,rank:n+1,trend:0===n?"same":Math.random()>.7?"up":Math.random()>.5?"down":"same"}}).sort((s,n)=>n.points-s.points).map((s,n)=>({...s,position:n+1,rank:n+1}))}convertToStandings(e){return e.map(o=>({position:o.position,previousPosition:o.position,userId:o.memberId,name:o.name,played:o.played,points:o.points,correctScores:Math.floor(.12*o.points)+Math.floor(3*Math.random()),correctResults:Math.floor(.25*o.points)+Math.floor(2*Math.random()),jokerUsed:o.jokerUsed}))}getUserGroupsWithStandings(){const e=this.getUserGroups(),o=this.authService.getCurrentUser();return e.map(r=>{const t=this.getGroupLeaderboard(r.id),s=this.convertToStandings(t),n=o?s.findIndex(i=>i.userId===o.id)+1:null;return{group:{id:r.id,name:r.name,code:r.code,memberCount:r.memberCount,type:r.type},leaderboard:s,userPosition:n||null}})}getGroupWithStandings(e){const o=this.getAllGroups().find(i=>i.id===e);if(!o)return null;const r=this.getGroupLeaderboard(e),t=this.convertToStandings(r),s=this.authService.getCurrentUser(),n=s?t.findIndex(i=>i.userId===s.id)+1:null;return{group:{id:o.id,name:o.name,code:o.code,memberCount:o.memberCount,type:o.type},leaderboard:t,userPosition:n||null}}getUserGroupsWithLeaderboards(){const e=this.getUserGroups(),o=this.authService.getCurrentUser();return e.map(r=>{const t=this.getGroupLeaderboard(r.id),s=o?t.findIndex(n=>n.memberId===o.id)+1:null;return{group:r,leaderboard:t,userPosition:s||null}})}getAdminGroupsWithLeaderboards(){const e=this.getAdminGroups(),o=this.authService.getCurrentUser();return e.map(r=>{const t=this.getGroupLeaderboard(r.id),s=o?t.findIndex(n=>n.memberId===o.id)+1:null;return{group:r,leaderboard:t,adminPosition:s||null}})}generateGroupCode(){let o="";for(let t=0;t<6;t++)o+="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".charAt(Math.floor(36*Math.random()));return this.getAllGroups().map(t=>t.code).includes(o)?this.generateGroupCode():o}createTestGroup(){const e={id:crypto.randomUUID(),name:"Test Football Group",code:"TEST01",memberCount:2,createdAt:new Date,members:[{id:"admin-1",name:"John Admin",email:"admin@test.com",joinedAt:new Date,status:"active",role:"admin"},{id:"player-1",name:"Sarah Player",email:"player@test.com",joinedAt:new Date,status:"active",role:"player"}],settings:{allowPlayerInvites:!0,autoApproveJoins:!0,showLeaderboard:!0,allowMemberChat:!0},type:"casual",entryFee:0,paidMembers:0,totalPrizePool:0,adminName:"John Admin",leaderboard:[]};return this.saveGroup(e),e}createJoinableTestGroup(){const e={id:crypto.randomUUID(),name:"Joinable Test Group",code:"JOIN01",memberCount:1,createdAt:new Date,members:[{id:"different-admin-id",name:"Test Admin",email:"testadmin@example.com",joinedAt:new Date,status:"active",role:"admin"}],settings:{allowPlayerInvites:!0,autoApproveJoins:!0,showLeaderboard:!0,allowMemberChat:!0},type:"casual",entryFee:0,paidMembers:0,totalPrizePool:0,adminName:"Test Admin",leaderboard:[]};return this.saveGroup(e),console.log("Created joinable test group with code:",e.code),e}debugStorageState(){const e=this.authService.getCurrentUser();console.log("\u{1f50d} GroupService Debug Storage State:"),console.log(`\u{1f464} Current User: ${(null==e?void 0:e.id)||"None"} (${(null==e?void 0:e.email)||"No email"})`);const o=localStorage.getItem(this.GLOBAL_GROUPS_KEY);console.log(`\u{1f30d} Global Groups Count: ${o?JSON.parse(o).length:0}`);const r=localStorage.getItem(this.LEGACY_STORAGE_KEY);console.log(`\u{1f4c2} Legacy Groups Count: ${r?JSON.parse(r).length:0}`);const t=Object.keys(localStorage).filter(s=>s.startsWith("sotd_"));if(console.log("\u{1f5dd}\ufe0f All SOTD Storage Keys:",t),e){const s=this.getUserGroups(),n=this.getAdminGroups();console.log(`\u{1f464} User Groups (filtered): ${s.length}`),console.log(`\u{1f451} Admin Groups (filtered): ${n.length}`)}}}return(l=p).\u0275fac=function(e){return new(e||l)(g.KVO(b.u))},l.\u0275prov=g.jDH({token:l,factory:l.\u0275fac,providedIn:"root"}),p})()}}]);